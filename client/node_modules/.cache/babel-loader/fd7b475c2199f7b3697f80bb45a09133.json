{"ast":null,"code":"import _slicedToArray from \"/Users/Teva/Desktop/Cleanup/Translator/whatson/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Teva/Desktop/Cleanup/Translator/whatson/src/pages/MainPage/MainPage.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Particles from 'react-particles-js';\nimport Header from '../../components/Header/Header';\nimport Interface from '../../components/Interface/Interface';\nimport Output from '../../components/Output/Output';\nimport LanguageToggle from '../../components/LanguageToggle/LanguageToggle';\nimport { ReactComponent as MicOff } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/microphone-off.svg\";\nimport { ReactComponent as MicOn } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/microphone-on.svg\";\nimport { MainPageContainer, MicContainer } from './MainPageStyles';\n\nfunction MainPage() {\n  //state\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        translatedText = _useState4[0],\n        setTranslatedText = _useState4[1];\n\n  const _useState5 = useState('en-US'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        inputLanguage = _useState6[0],\n        setInputLanguage = _useState6[1];\n\n  const _useState7 = useState('es'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        outputLanguage = _useState8[0],\n        setOutputLanguage = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isRecording = _useState10[0],\n        setIsRecording = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isOpen = _useState12[0],\n        setIsOpen = _useState12[1];\n\n  const languages = {\n    \"en\": [\"English\", {\n      \"es\": \"Spanish\",\n      \"fr\": \"French\"\n    }],\n    \"fr\": [\"Français\", {\n      \"es\": \"Espagnol\",\n      \"en\": \"Anglais\"\n    }],\n    \"es\": [\"Español\", {\n      \"en\": \"Inglés\",\n      \"fr\": \"Francés\"\n    }]\n  };\n  const particlesOptions = {\n    particles: {\n      number: {\n        value: 55,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      },\n      size: {\n        value: 2\n      }\n    }\n  };\n\n  const inputLanguageHandler = (language, event) => {\n    event.preventDefault();\n\n    if (outputLanguage === language.slice(0, 2)) {\n      setOutputLanguage(inputLanguage.slice(0, 2));\n    }\n\n    setIsOpen(false);\n    setInputLanguage(language);\n  };\n\n  const outputLanguageHandler = (language, event) => {\n    event.preventDefault();\n\n    if (inputLanguage === language) {\n      switch (outputLanguage) {\n        case 'en':\n          setInputLanguage('en-US');\n          break;\n\n        case 'fr':\n          setInputLanguage('fr-FR');\n          break;\n\n        case 'es':\n          setInputLanguage('es-ES');\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setIsOpen(false);\n    setOutputLanguage(language.slice(0, 2));\n  };\n\n  useEffect(() => {\n    const getCredentials = async () => {\n      const response = await fetch('http://localhost:3000/');\n      const myjson = await response.json();\n      const token = await myjson.access_token;\n      const wsURI = \"wss://stream.watsonplatform.net/speech-to-text/api/v1/recognize?access_token=\".concat(token, \"&model=\").concat(inputLanguage, \"_BroadbandModel\");\n      const websocket = new WebSocket(wsURI);\n\n      websocket.onopen = function (event) {\n        onOpen(event);\n      };\n\n      websocket.onclose = function (event) {\n        onClose(event);\n      };\n\n      websocket.onmessage = function (event) {\n        onMessage(event);\n      };\n\n      websocket.onerror = function (event) {\n        onError(event);\n      };\n\n      function onOpen(event) {\n        setIsOpen(true);\n        console.log('connecting');\n      }\n\n      function onClose(event) {\n        console.log('closing:', event.data);\n        window.location.reload();\n      }\n\n      function onMessage(event) {\n        const data = JSON.parse(event.data);\n\n        if (data.hasOwnProperty('results')) {\n          if (data.results.length) {\n            console.log(data);\n            fetch('http://localhost:3000/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                data: data.results[0].alternatives[0].transcript,\n                outputLanguage,\n                inputLanguage\n              })\n            }).then(response => response.json()).then(response => {\n              setText(data.results[0].alternatives[0].transcript);\n              setTranslatedText(response);\n            });\n          }\n        }\n      }\n\n      function onError(event) {\n        console.log(event.data);\n      }\n\n      const listen = document.querySelector('.startRecording');\n      const stop = document.querySelector('.stopRecording');\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        console.log('getUserMedia supported.');\n        navigator.mediaDevices.getUserMedia( // constraints - only audio needed for this app\n        {\n          audio: true,\n          sampleSize: 16\n        }) // Success callback\n        .then(stream => {\n          const mediaRecorder = new MediaRecorder(stream);\n\n          listen.onclick = function (event) {\n            event.preventDefault();\n            console.log('inputLang:', inputLanguage);\n            console.log('outputLang:', outputLanguage);\n            console.log('uri:', wsURI);\n\n            if (websocket.readyState === 1 && mediaRecorder.state === 'inactive') {\n              setIsRecording(isRecording => !isRecording);\n              websocket.send(JSON.stringify({\n                action: 'start',\n                'content-type': 'application/octet-stream',\n                'interim_results': true,\n                'inactivity_timeout': 100\n              }));\n              mediaRecorder.start(1000);\n              console.log(mediaRecorder.state);\n              console.log(\"recorder started\");\n            }\n\n            stop.onclick = function (event) {\n              event.preventDefault();\n              setIsRecording(isRecording => !isRecording);\n\n              if (mediaRecorder.state === 'recording') {\n                mediaRecorder.stop();\n                console.log(mediaRecorder.state);\n                console.log(\"recorder stopped\");\n              }\n            };\n\n            mediaRecorder.ondataavailable = function (event) {\n              websocket.send(event.data);\n            };\n\n            mediaRecorder.onstop = function (event) {\n              websocket.send(JSON.stringify({\n                action: 'stop'\n              }));\n            };\n          };\n        }).catch(function (err) {\n          console.log('The following getUserMedia error occured: ' + err);\n        });\n      } else {\n        console.log('getUserMedia not supported on your browser!');\n      }\n    };\n\n    getCredentials();\n  }, [inputLanguage, outputLanguage]);\n  return React.createElement(MainPageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Particles, {\n    className: \"particles\",\n    params: particlesOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(Interface, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(LanguageToggle, {\n    heading: inputLanguage === \"en-US\" ? \"From\" : \"De\",\n    handler: inputLanguageHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(MicContainer, {\n    style: isOpen ? {} : {\n      opacity: \"0.4\",\n      pointerEvents: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(MicOff, {\n    style: isRecording ? {\n      width: '50%',\n      height: '50%'\n    } : {\n      display: \"none\"\n    },\n    className: \"stopRecording\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(MicOn, {\n    style: isRecording ? {\n      display: \"none\"\n    } : {\n      width: '50%',\n      height: '50%'\n    },\n    className: \"startRecording\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  })), React.createElement(LanguageToggle, {\n    heading: inputLanguage === \"en-US\" ? \"To\" : \"A\",\n    handler: outputLanguageHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  })), React.createElement(Output, {\n    originalLanguage: languages[inputLanguage.slice(0, 2)][0],\n    originalText: text,\n    translatedLanguage: languages[inputLanguage.slice(0, 2)][1][outputLanguage],\n    translatedText: translatedText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }));\n}\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/Teva/Desktop/Cleanup/Translator/whatson/src/pages/MainPage/MainPage.jsx"],"names":["React","useState","useEffect","Particles","Header","Interface","Output","LanguageToggle","MainPageContainer","MicContainer","MainPage","text","setText","translatedText","setTranslatedText","inputLanguage","setInputLanguage","outputLanguage","setOutputLanguage","isRecording","setIsRecording","isOpen","setIsOpen","languages","particlesOptions","particles","number","value","density","enable","value_area","size","inputLanguageHandler","language","event","preventDefault","slice","outputLanguageHandler","getCredentials","response","fetch","myjson","json","token","access_token","wsURI","websocket","WebSocket","onopen","onOpen","onclose","onClose","onmessage","onMessage","onerror","onError","console","log","data","window","location","reload","JSON","parse","hasOwnProperty","results","length","method","headers","body","stringify","alternatives","transcript","then","listen","document","querySelector","stop","navigator","mediaDevices","getUserMedia","audio","sampleSize","stream","mediaRecorder","MediaRecorder","onclick","readyState","state","send","action","start","ondataavailable","onstop","catch","err","opacity","pointerEvents","width","height","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Particles from 'react-particles-js';\n\nimport Header from '../../components/Header/Header';\nimport Interface from '../../components/Interface/Interface';\nimport Output from '../../components/Output/Output';\nimport LanguageToggle from '../../components/LanguageToggle/LanguageToggle';\nimport { ReactComponent as MicOff} from '../../assets/microphone-off.svg';\nimport { ReactComponent as MicOn} from '../../assets/microphone-on.svg';\n\nimport {\n  MainPageContainer, MicContainer\n} from './MainPageStyles';\n\nfunction MainPage() {\n  //state\n  const [ text, setText ] = useState('');\n  const [ translatedText, setTranslatedText ] = useState('');\n  const [ inputLanguage, setInputLanguage ] = useState('en-US');\n  const [ outputLanguage, setOutputLanguage ] = useState('es');\n  const [ isRecording, setIsRecording ] = useState(false);\n  const [ isOpen, setIsOpen ] = useState(false);\n\n\n  const languages = {\n    \"en\": [\"English\", {\"es\": \"Spanish\", \"fr\": \"French\"}],\n    \"fr\": [\"Français\", {\"es\": \"Espagnol\", \"en\": \"Anglais\"}],\n    \"es\": [\"Español\", {\"en\": \"Inglés\", \"fr\": \"Francés\"}]\n  }\n\n  const particlesOptions = {\n    particles: {\n      number: {\n        value: 55,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      },\n      size: {\n        value: 2\n      }\n    },\n  }\n\n  const inputLanguageHandler = (language, event) => {\n    event.preventDefault();\n    if (outputLanguage === language.slice(0, 2)) {\n      setOutputLanguage(inputLanguage.slice(0, 2))\n    }\n    setIsOpen(false);\n    setInputLanguage(language);\n  }\n\n  const outputLanguageHandler = (language, event) => {\n    event.preventDefault();\n    if (inputLanguage === language) {\n      switch (outputLanguage) {\n        case 'en':\n          setInputLanguage('en-US')\n          break;\n        case 'fr':\n          setInputLanguage('fr-FR')\n          break;\n        case 'es':\n          setInputLanguage('es-ES')\n          break;\n        default:\n          break;\n      }\n    }\n    setIsOpen(false);\n    setOutputLanguage(language.slice(0, 2));\n  }\n\n  useEffect(() => {\n    const getCredentials = async () => {\n\n      const response = await fetch('http://localhost:3000/');\n      const myjson = await response.json();\n      const token = await myjson.access_token;\n    \n      const wsURI = `wss://stream.watsonplatform.net/speech-to-text/api/v1/recognize?access_token=${token}&model=${inputLanguage}_BroadbandModel`;\n\n      const websocket = new WebSocket(wsURI);\n      websocket.onopen = function(event) { onOpen(event) };\n      websocket.onclose = function(event) { onClose(event) };\n      websocket.onmessage = function(event) { onMessage(event) };\n      websocket.onerror = function(event) { onError(event) };\n\n      function onOpen(event) {\n        setIsOpen(true);\n        console.log('connecting');\n      }\n\n      function onClose(event) {\n        console.log('closing:', event.data);\n        window.location.reload();\n      }\n      \n      function onMessage(event) {\n        const data = JSON.parse(event.data);\n        if (data.hasOwnProperty('results')) {\n          if (data.results.length) {\n          console.log(data)\n          fetch('http://localhost:3000/', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              data: data.results[0].alternatives[0].transcript,\n              outputLanguage,\n              inputLanguage\n            })\n          }).then(response => response.json())\n          .then(response => {\n            setText(data.results[0].alternatives[0].transcript)\n            setTranslatedText(response)\n          })\n        }}\n      }\n      \n      function onError(event) {\n        console.log(event.data);\n      }\n\n      const listen = document.querySelector('.startRecording');\n      const stop = document.querySelector('.stopRecording');\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        console.log('getUserMedia supported.');\n        navigator.mediaDevices.getUserMedia (\n          // constraints - only audio needed for this app\n          { audio: true, sampleSize: 16 })\n    \n          // Success callback\n          .then(stream => {\n              const mediaRecorder = new MediaRecorder(stream);\n              listen.onclick = function(event) {\n                event.preventDefault();\n                \n                console.log('inputLang:', inputLanguage)\n                console.log('outputLang:', outputLanguage)\n                console.log('uri:', wsURI)\n                if (websocket.readyState === 1 && mediaRecorder.state === 'inactive') {\n                  setIsRecording(isRecording => !isRecording)\n                  websocket.send(JSON.stringify({\n                    action: 'start',\n                    'content-type': 'application/octet-stream',\n                    'interim_results': true,\n                    'inactivity_timeout': 100\n                  }));\n                  mediaRecorder.start(1000);\n\n                  console.log(mediaRecorder.state);\n                  console.log(\"recorder started\");\n                }\n\n                stop.onclick = function(event) {\n                  event.preventDefault();\n                  setIsRecording(isRecording => !isRecording);\n                  if(mediaRecorder.state === 'recording') {\n                    mediaRecorder.stop();\n                    console.log(mediaRecorder.state);\n                    console.log(\"recorder stopped\");\n                  }\n                }\n\n                mediaRecorder.ondataavailable = function(event) {\n                  websocket.send(event.data)\n                }\n\n                mediaRecorder.onstop = function(event) {            \n                  websocket.send(JSON.stringify({action: 'stop'}))\n                }\n          }})\n          .catch(function(err) {\n              console.log('The following getUserMedia error occured: ' + err);\n          }\n        );\n    } else {\n        console.log('getUserMedia not supported on your browser!');\n    }\n  }\n  getCredentials();\n}, [inputLanguage, outputLanguage])\n  \n  return (  \n    <MainPageContainer>\n      <Particles className='particles'\n        params={particlesOptions}\n      />\n      <Header />\n      <Interface >\n        <LanguageToggle heading={inputLanguage === \"en-US\"? \"From\" : \"De\"} handler={inputLanguageHandler} />\n        <MicContainer style={isOpen ? {} : {opacity: \"0.4\", pointerEvents: \"none\"}}>\n          <MicOff style={isRecording ? {width: '50%', height: '50%'} : {display: \"none\"}} className=\"stopRecording\" />\n          <MicOn style={isRecording ? {display: \"none\"} : {width: '50%', height: '50%'} } className=\"startRecording\" />\n        </MicContainer>\n        <LanguageToggle heading={inputLanguage === \"en-US\"? \"To\" : \"A\"} handler={outputLanguageHandler}/>\n      </Interface>\n      <Output originalLanguage={languages[inputLanguage.slice(0, 2)][0]} originalText={text} translatedLanguage={languages[inputLanguage.slice(0, 2)][1][outputLanguage]} translatedText={translatedText}/>\n    </MainPageContainer>\n  )\n}\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}